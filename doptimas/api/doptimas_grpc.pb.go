// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: src/main/proto/doptimas.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimulationClient is the client API for Simulation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulationClient interface {
	ListAgents(ctx context.Context, in *ListAgentRequest, opts ...grpc.CallOption) (*ListAgentResponse, error)
	DescribeAgent(ctx context.Context, in *DescribeAgentRequest, opts ...grpc.CallOption) (*DescribeAgentResponse, error)
	ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
	DescribeRegion(ctx context.Context, in *DescribeRegionRequest, opts ...grpc.CallOption) (*DescribeRegionResponse, error)
}

type simulationClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulationClient(cc grpc.ClientConnInterface) SimulationClient {
	return &simulationClient{cc}
}

func (c *simulationClient) ListAgents(ctx context.Context, in *ListAgentRequest, opts ...grpc.CallOption) (*ListAgentResponse, error) {
	out := new(ListAgentResponse)
	err := c.cc.Invoke(ctx, "/simulation.Simulation/listAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) DescribeAgent(ctx context.Context, in *DescribeAgentRequest, opts ...grpc.CallOption) (*DescribeAgentResponse, error) {
	out := new(DescribeAgentResponse)
	err := c.cc.Invoke(ctx, "/simulation.Simulation/describeAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := c.cc.Invoke(ctx, "/simulation.Simulation/listRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationClient) DescribeRegion(ctx context.Context, in *DescribeRegionRequest, opts ...grpc.CallOption) (*DescribeRegionResponse, error) {
	out := new(DescribeRegionResponse)
	err := c.cc.Invoke(ctx, "/simulation.Simulation/describeRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulationServer is the server API for Simulation service.
// All implementations must embed UnimplementedSimulationServer
// for forward compatibility
type SimulationServer interface {
	ListAgents(context.Context, *ListAgentRequest) (*ListAgentResponse, error)
	DescribeAgent(context.Context, *DescribeAgentRequest) (*DescribeAgentResponse, error)
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	DescribeRegion(context.Context, *DescribeRegionRequest) (*DescribeRegionResponse, error)
	mustEmbedUnimplementedSimulationServer()
}

// UnimplementedSimulationServer must be embedded to have forward compatible implementations.
type UnimplementedSimulationServer struct {
}

func (UnimplementedSimulationServer) ListAgents(context.Context, *ListAgentRequest) (*ListAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedSimulationServer) DescribeAgent(context.Context, *DescribeAgentRequest) (*DescribeAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAgent not implemented")
}
func (UnimplementedSimulationServer) ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegions not implemented")
}
func (UnimplementedSimulationServer) DescribeRegion(context.Context, *DescribeRegionRequest) (*DescribeRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRegion not implemented")
}
func (UnimplementedSimulationServer) mustEmbedUnimplementedSimulationServer() {}

// UnsafeSimulationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulationServer will
// result in compilation errors.
type UnsafeSimulationServer interface {
	mustEmbedUnimplementedSimulationServer()
}

func RegisterSimulationServer(s grpc.ServiceRegistrar, srv SimulationServer) {
	s.RegisterService(&Simulation_ServiceDesc, srv)
}

func _Simulation_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simulation.Simulation/listAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).ListAgents(ctx, req.(*ListAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_DescribeAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).DescribeAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simulation.Simulation/describeAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).DescribeAgent(ctx, req.(*DescribeAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_ListRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).ListRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simulation.Simulation/listRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).ListRegions(ctx, req.(*ListRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulation_DescribeRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServer).DescribeRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simulation.Simulation/describeRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServer).DescribeRegion(ctx, req.(*DescribeRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Simulation_ServiceDesc is the grpc.ServiceDesc for Simulation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Simulation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulation.Simulation",
	HandlerType: (*SimulationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listAgents",
			Handler:    _Simulation_ListAgents_Handler,
		},
		{
			MethodName: "describeAgent",
			Handler:    _Simulation_DescribeAgent_Handler,
		},
		{
			MethodName: "listRegions",
			Handler:    _Simulation_ListRegions_Handler,
		},
		{
			MethodName: "describeRegion",
			Handler:    _Simulation_DescribeRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/main/proto/doptimas.proto",
}

// BenchmarkClient is the client API for Benchmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkClient interface {
}

type benchmarkClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkClient(cc grpc.ClientConnInterface) BenchmarkClient {
	return &benchmarkClient{cc}
}

// BenchmarkServer is the server API for Benchmark service.
// All implementations must embed UnimplementedBenchmarkServer
// for forward compatibility
type BenchmarkServer interface {
	mustEmbedUnimplementedBenchmarkServer()
}

// UnimplementedBenchmarkServer must be embedded to have forward compatible implementations.
type UnimplementedBenchmarkServer struct {
}

func (UnimplementedBenchmarkServer) mustEmbedUnimplementedBenchmarkServer() {}

// UnsafeBenchmarkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkServer will
// result in compilation errors.
type UnsafeBenchmarkServer interface {
	mustEmbedUnimplementedBenchmarkServer()
}

func RegisterBenchmarkServer(s grpc.ServiceRegistrar, srv BenchmarkServer) {
	s.RegisterService(&Benchmark_ServiceDesc, srv)
}

// Benchmark_ServiceDesc is the grpc.ServiceDesc for Benchmark service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Benchmark_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulation.Benchmark",
	HandlerType: (*BenchmarkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "src/main/proto/doptimas.proto",
}
